def my_system_with_obs(nsteps,x0,A,H,dt,sigma_motor,sigma_sensory):
  """
  my_system_with_obs is a function that model the time-evolution of the latent state 
  and its observation
  """
  ######################
  ### your code here ###
  ######################
  state_evolution = np.zeros([len(x0),nsteps+1])
  obs_evolution = np.zeros((len(x0),nsteps+1))
  state_evolution[:,0] = x0
  obs_evolution[:,0] = x0
  cov_motor = [[sigma_motor , 0],[0, sigma_motor]]
  motor_noise = np.random.multivariate_normal(np.zeros(len(x0)) ,cov_motor,nsteps).T
  cov_sensory = [[sigma_sensory , 0],[0, sigma_sensory]]
  sensory_noise = np.random.multivariate_normal(np.zeros(len(x0)) ,cov_sensory,nsteps).T
  for ii in range(nsteps):
    state_evolution[:,ii+1] = A @ state_evolution[:,ii] + motor_noise[:,ii]
    obs_evolution[:,ii+1] = H @ state_evolution[:,ii+1] + sensory_noise[:,ii]  
  return state_evolution,obs_evolution

# Run the lines below to test your code 
nsteps = 50
dt = 0.1
x0 = np.array([0,0]).T
A = np.array([[1.,1.],[-(2*np.pi/20.)**2.,0.9]])
H = np.eye(2)
sigma_motor = 0.05
sigma_sensory = 0.02
######################
### your code here ###
######################
state_evolution, obs_evolution = my_system_with_obs(nsteps,x0,A,H,dt,sigma_motor,sigma_sensory)
plot_my_system_with_obs(state_evolution,obs_evolution)