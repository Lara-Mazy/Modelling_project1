{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"LGBIO2060_TP1","provenance":[],"collapsed_sections":[],"toc_visible":true,"authorship_tag":"ABX9TyNrOtLMheHXzANOyhdGJ9IG"},"kernelspec":{"name":"python3","display_name":"Python 3"},"widgets":{"application/vnd.jupyter.widget-state+json":{"b9ac5614f2334585974d5897022a0db0":{"model_module":"@jupyter-widgets/controls","model_name":"VBoxModel","state":{"_view_name":"VBoxView","_dom_classes":["widget-interact"],"_model_name":"VBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_3789aed6fcc446ff8edeebda6db4ccaf","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_3af4df8606e244559fb7dd9ce5869897","IPY_MODEL_dd0643402d1244c89801de6d82a22aa5","IPY_MODEL_14511ea8dbfa4b23aa9daa927c45975b"]}},"3789aed6fcc446ff8edeebda6db4ccaf":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"3af4df8606e244559fb7dd9ce5869897":{"model_module":"@jupyter-widgets/controls","model_name":"FloatSliderModel","state":{"_view_name":"FloatSliderView","style":"IPY_MODEL_04a20474464d43eb9c48cf933b0b9af0","_dom_classes":[],"description":"mu:","step":0.1,"_model_name":"FloatSliderModel","orientation":"horizontal","max":10,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":2,"_view_count":null,"disabled":false,"_view_module_version":"1.5.0","min":-10,"continuous_update":true,"readout_format":".2f","description_tooltip":null,"readout":true,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_d14e290393a34fadb01c215978e78b04"}},"dd0643402d1244c89801de6d82a22aa5":{"model_module":"@jupyter-widgets/controls","model_name":"FloatSliderModel","state":{"_view_name":"FloatSliderView","style":"IPY_MODEL_371d56d2bdcd44139eb6c9f53c3a2740","_dom_classes":[],"description":"sigma","step":0.1,"_model_name":"FloatSliderModel","orientation":"horizontal","max":10,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":0.5,"_view_count":null,"disabled":false,"_view_module_version":"1.5.0","min":0.5,"continuous_update":true,"readout_format":".2f","description_tooltip":null,"readout":true,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_48db1964c9d24834a6b344690f76a774"}},"14511ea8dbfa4b23aa9daa927c45975b":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","state":{"_view_name":"OutputView","msg_id":"","_dom_classes":[],"_model_name":"OutputModel","outputs":[{"output_type":"display_data","metadata":{"tags":[],"needs_background":"light"},"image/png":"\n","text/plain":"<Figure size 432x288 with 1 Axes>"}],"_view_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_view_count":null,"_view_module_version":"1.0.0","layout":"IPY_MODEL_6cbfb9e66f4e43a89360b25ad140dc21","_model_module":"@jupyter-widgets/output"}},"04a20474464d43eb9c48cf933b0b9af0":{"model_module":"@jupyter-widgets/controls","model_name":"SliderStyleModel","state":{"_view_name":"StyleView","handle_color":null,"_model_name":"SliderStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"d14e290393a34fadb01c215978e78b04":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"371d56d2bdcd44139eb6c9f53c3a2740":{"model_module":"@jupyter-widgets/controls","model_name":"SliderStyleModel","state":{"_view_name":"StyleView","handle_color":null,"_model_name":"SliderStyleModel","description_width":"initial","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"48db1964c9d24834a6b344690f76a774":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"6cbfb9e66f4e43a89360b25ad140dc21":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"code","metadata":{"id":"tg1WKjlfQuXF","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1599487555290,"user_tz":-120,"elapsed":582,"user":{"displayName":"Antoine de Comité","photoUrl":"","userId":"14412021039052808935"}}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","\n","# Some helper functions\n","\n","def plot_my_gaussian(x,px):\n","  \"\"\"\n","  This function plots a Gaussian distribution\n","\n","  Inputs : x (numpy array) along which we want to represent the distribution\n","           px(numpy array) values taken by the distribution\n","  \"\"\"\n","\n","  fig, ax=plt.subplots()\n","  ax.plot(x,px,'C1',LineWidth=2,label='Estimated state')\n","  ax.axvline(x[px.argmax()],label='Latent state')\n","  ax.legend()\n","  ax.set_ylabel('Probability')\n","  ax.set_xlabel('Value')\n","\n","  return ax"],"execution_count":18,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UKmvg4dBQvTT","colab_type":"text"},"source":["# LGBIO 2060 - Exercise session 1\n","# Sequential probability ratio test and urgency gating\n","\n","Contents : "]},{"cell_type":"markdown","metadata":{"id":"QiIIrg38RKLh","colab_type":"text"},"source":["# Part 1 : Gaussian distribution - Inferring the world through sensitive input\n","When we try to estimate the exact position of our gaze or limb based on  sensory inputs (vision, proprioception), we always end up with an erroneous estimate. This means that, even though we have perfectly working sensory inputs, they are influenced by noise and therefore the inferred latent state will be a noisy approximation of the real latent state. For example, if the exact position of the tip of your fingernail in a given cartesian space is $[2 cm, 3cm]$, you might end up with an estimate which is $[1.95 cm, 3.07 cm]$ when you rely on sensory input to find it. \\\\\n","\n","\n","The noisy observation of the latent state can be modelled by a Gaussian distribution whose mean is the value of the latent state and whose variance characterises the amount of noise present in the system. We can therefore write that the observation $y$ of the state $\\mu$ is such that :\n","\n","\\\\\n","\n","$$\n","y\\sim\\mathcal{N}\\left(\\mu,\\, \\sigma^2\\right)\n","$$\n","\n","\\\\\n","\n","\n","As a reminder, au Gaussian distribution is characterised by the following equation : \\\\\n","\n","\n","$$\\mathcal{N}\\left(\\mu,\\sigma^2\\right) = \\frac{1}{\\sqrt{2\\pi \\sigma^2}}\\exp\\left(\\frac{-\\left(x-\\mu\\right)^2}{2\\sigma^2}\\right)$$\n","\n","**Exercise 1**\n","\n","Implement a function that creates a gaussian distribution given its parameters and the *x* vector whose signature is given below\n"]},{"cell_type":"code","metadata":{"id":"gVyupXhkUqc-","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":297},"executionInfo":{"status":"ok","timestamp":1599487521642,"user_tz":-120,"elapsed":724,"user":{"displayName":"Antoine de Comité","photoUrl":"","userId":"14412021039052808935"}},"outputId":"899a5316-e1ec-4833-b350-39ed3f22b573"},"source":["def my_gaussian(x_vector,mu,sigma):\n","  \"\"\"\n","  This function computes the Gaussian distribution of parameters mu and sigma \n","  over the set x_vector\n","  \n","  Inputs :\n","    x_vector is the set over which we want to evaluate the distribution\n","    mu is the mean value of the distribution\n","    sigma is the standard deviation of the distribution\n","\n","  Outputs : \n","    px is a numpy array that contains the value of the distribution evaluate at \n","    every points of the set x_vector\n","  \"\"\"\n","  px = 1/(np.sqrt(2*np.pi*sigma**2)) *np.exp((-(x_vector-mu)**2)/(2*sigma**2))\n","  ###################################\n","  ####  Insert your code here  ###\n","  ####                            ###\n","  # raise NotImplementedError(\"`my_gaussian` is incomplete\")\n","  ###################################\n","\n","  return px\n","\n","# Test your function on a gaussian of mean 0, variance 1 that you compute over\n","# the set [-5,5]. Create a graphical representation of your distribution\n","\n","x_vector = np.arange(-5,5,0.1)\n","px = my_gaussian(x_vector,0,1)\n","\n","fig, ax=plt.subplots()\n","ax.plot(x_vector,px,'r')\n","ax.set_xlabel(\"Position of the fingernail\")\n","ax.set_ylabel(\"Probability\")"],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'Probability')"]},"metadata":{"tags":[]},"execution_count":16},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"kiPj-_jnXp3D","colab_type":"text"},"source":["Use the widget herebelow to investigate the impact of the mean and standard deviation on the shape of the gaussian distribution. \n","\n","\n","**Make sure to execute the cell before playing with the widget**"]},{"cell_type":"code","metadata":{"id":"x7NLOnUlsCTF","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":343,"referenced_widgets":["b9ac5614f2334585974d5897022a0db0","3789aed6fcc446ff8edeebda6db4ccaf","3af4df8606e244559fb7dd9ce5869897","dd0643402d1244c89801de6d82a22aa5","14511ea8dbfa4b23aa9daa927c45975b","04a20474464d43eb9c48cf933b0b9af0","d14e290393a34fadb01c215978e78b04","371d56d2bdcd44139eb6c9f53c3a2740","48db1964c9d24834a6b344690f76a774","6cbfb9e66f4e43a89360b25ad140dc21"]},"executionInfo":{"status":"ok","timestamp":1599487744637,"user_tz":-120,"elapsed":890,"user":{"displayName":"Antoine de Comité","photoUrl":"","userId":"14412021039052808935"}},"outputId":"162d7170-43d7-43c0-deb8-f9b94258acd3"},"source":["#@title\n","#@markdown Make sure you execute this cell to enable the widget\n","\n","x = np.arange(-10,11,0.1)\n","\n","import ipywidgets as widgets\n","\n","def refresh(mu=1,sigma=1):\n","  gaussian = my_gaussian(x_vector,mu,sigma)\n","\n","  ax = plot_my_gaussian(x_vector,gaussian)\n","  plt.show()\n","\n","style = {'description_width' : 'initial'}\n","\n","_ = widgets.interact(refresh,\n","    mu = widgets.FloatSlider(value=2, min=-10, max=10, steps=0.5, description=\"mu:\", style = style),\n","    sigma = widgets.FloatSlider(value=0.5, min=0.5, max=10, steps=0.5, description=\"sigma\",style=style),\n",")"],"execution_count":19,"outputs":[{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"b9ac5614f2334585974d5897022a0db0","version_minor":0,"version_major":2},"text/plain":["interactive(children=(FloatSlider(value=2.0, description='mu:', max=10.0, min=-10.0, style=SliderStyle(descrip…"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"FNA_YTl5Xx8U","colab_type":"text"},"source":["# Part 2 : Sequential probability ratio test (SPRT) - Decision making\n","\n","Humans and animals are able to make decisions when they faced a binary alternative. In this section, we will model decision making using sequential probability ratio test (SPRT). This model can be used in a random dot motion task (see [here](https://www.youtube.com/watch?v=oDxcyTn-0os) for an example). In this paradigm, a patch of points moving either on average to the left or to the right is shown to the subject that has to determine the direction of movement. Subjects' goal is to determine the direction of the velocity which can be easy or though depending on the coherence of each individual point.\n","\n","\n","In this tutorial, we consider a simplified version of the random dot motion task. On each trial $i$, the subject is shown a single dot moving at velocity $v_i$ generated by a fixed probability distribution, which we know to be either: \n","\n","\n","$$\n","\\\\\n","\\begin{eqnarray}\n","p_L &=& \\mathcal{N}\\left(-1,\\sigma^2\\right)\\\\\n","&& \\textrm{or}\\\\\n","p_R &=& \\mathcal{N}\\left(+1,\\sigma^2\\right)\\\\\n","\\end{eqnarray}\n","$$\n","\n","This means that the dot is moving leftward or rightward and that its speed is normally distributed around $|1|$. We want to determine which distribution amongst $p_L$ and $p_R$ is the true data generating distribution. In order to do that, we will define two alternative hypotheses, the first one $H_L$ states that $p_L$ is the data generating distribution while $H_R$ states that it is $p_R$. The decision process is based on the time-evolution of the log likelihood ratio between these two hypotheses. For both hypothesis, we will define the likelihood function that will quantify how probable it is that the data point $x_i$ comes from a given distribution. For a given occurence of the point $x_i$, the two likelihood functions will be defined by $p_L\\left(x_i|z=0\\right)$ and $p_R\\left(x_i|z=1\\right)$, which are two gaussian distributions.\n","\n","\n","Using the following gaussian observations models\n","\n","$$\\begin{eqnarray}\n","p_L\\left(x|z=0\\right) & = & \\mathcal{N}\\left(\\mu_L,\\sigma_L^2\\right)\\\\\n","p_R\\left(x|z=1\\right) & = & \\mathcal{N}\\left(\\mu_R,\\sigma_R^2\\right)\\\\\n","\\end{eqnarray}\n","$$\n","\n","and the definition of the log-likelihood ratio\n","\n","**Compute the expression of $\\log \\Lambda_i$, the log-likelihood ratio at iteration $i$** \n","\n","[Click here for solution](tospoiler.com)\n","\n","\n","Without loss of generality, let's further assume the true data generating distribution is $p_R$. In this case $x_i$ can be expressed as $x_i = \\mu_R + \\sigma_R \\epsilon$ where $\\epsilon$ comes from a standard Gaussian. The foregoing formula can then be rewritten as\n","$$\n","\\log \\Lambda_i = \\left( \\log\\dfrac{\\sigma_L}{\\sigma_R} + 0.5\\dfrac{\\left(\\mu_R-\\mu_L\\right)^2}{\\sigma_L^2}\\right) + \\left(\\dfrac{\\mu_L-\\mu_R}{\\sigma_L^2}\\epsilon - 0.5\\left[1-\\left(\\dfrac{\\sigma_R}{\\sigma_L}\\right)^2\\right]\\epsilon^2\\right)\n","$$\n","\n","Where the first two constnat terms serve as the drifting part and the last terms are the diffusion part. If we further let $\\sigma_L = \\sigma_R$, we can get rid of the quadratic term and this reduces to the classical deiscrete drift-diffusion equation where we have analytical solutions for mean and expected auto-covariance:\n","\n","$$\n","\\log \\Lambda_i = 0.5\\dfrac{\\left(\\mu_R - \\mu_L\\right)^2}{\\sigma^2} + \\dfrac{\\mu_R - \\mu_L}{\\sigma_L^2}\\epsilon, \\,\\,\\,\\,\\, \\text{where } \\epsilon\\sim\\mathcal{N}\\left(0,1\\right)\n","$$\n","\n","Using this very last expression, implement the function *simulate_SPRT_fixedtime* whose signature is given below.\n"]},{"cell_type":"code","metadata":{"id":"4Nuwv7vf6uIZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":209},"executionInfo":{"status":"error","timestamp":1599493876980,"user_tz":-120,"elapsed":569,"user":{"displayName":"Antoine de Comité","photoUrl":"","userId":"14412021039052808935"}},"outputId":"4d74c35a-eb39-4959-b2d8-55b122579489"},"source":["def simulate_SPRT_fixedtime(sigma,stop_time,true_dist=1):\n","  \"\"\"\n","  TBA\n","  \"\"\"\n","  muL = -1.0\n","  muR = 1.0\n","\n","  pL = stats.norm(loc=-1, scale = sigma)\n","  pR = stats.norm(loc= 1, scale = sigma)\n","\n","\n","  #Generate a random sequence of data\n","  if true_dist ==1:\n","    data = pR.rvs(size=stop_time)\n","  else:\n","    data = pL.rvs(size=stop_time)\n","  \n","  # calculate the cumulated evidence\n","\n","  ll_ratio_vec = log_likelihood_ratio(data,pL,pR)\n","\n","  evidence_history = np.cumsum(data,pL,pR)\n","\n","  if evidence_history[-1] >0:\n","    decision = 1\n","  elif evidence_history[-1] < 0:\n","    decision = 0\n","  else:\n","    decision = np.random.randint(2)\n","  \n","  return evidence_history, decision, data\n","\n","np.random.seed(1000)\n","sigma=3.5\n","num_sample=10\n","stop_time=150\n","\n","\n","#TO do codes\n"],"execution_count":20,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-20-69a627ca338b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     37\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 39\u001b[0;31m \u001b[0msimulate_and_plot_SPRT_fixedtime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msigma\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mstop_time\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnum_sample\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# function to create!!!!\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'simulate_and_plot_SPRT_fixedtime' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"hSlsP3MUYy0V","colab_type":"text"},"source":["# Part 3 : Stopping criterions\n","\n","\n","As you have seen in the preceeding graph, the evidence builds toward a threshold corresponding to one of the two alternatives. In order to determine when to stop and to make the decision stopping criterions have to be set. If you stop taking samples too early, (e.g. making a decision after only seeing 5 samples), or there's a huge amount of observation noise that buries the signal, you are likely to be driven by observation noise to a negative cumulated log likelihood ratio and thus make a wrong decision. You could get a sens of this by increasing noise elevel or decreasing stopping time in the last exercise. \n","\n","Now let's look at how decision accuracy varies with the number of samples we see quantitaively. first we'll fix our observation noise levle. In this exercise you will run several repeated simulations for a certain stopping time to calculate the average decision accuracty. Accuracy is simply defined as the proportion of correct trials across our repeated simulations. \n","\n","Do this for a range of stopping times and plot the relation between average decision accuracy and stoping time. you should get a positive correlation between these two quantities\n","\n","\n","\n","*   Choose a noise level. For example, $\\sigma=3$\n","*   Complete the function 'simulate_accuracy_vs_stoptime' to simulate and compute corresponding average accuracies for a list of stopping times.\n","*   Plot accuracy versus stopping time using the pre-written codes\n","\n","\n","\n","\n","**Taper une démo interactive**"]},{"cell_type":"code","metadata":{"id":"-2drRMdmV3GQ","colab_type":"code","colab":{}},"source":["#TODO code for students\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_WHyzPKZV7gu","colab_type":"code","colab":{}},"source":["#TODO interactive demo"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wMFJ27i1YzGs","colab_type":"text"},"source":["# Part 4 : DDM with fixed thresholds \n","\n","In this exerise, we will use thresholding as our stopping rule and observe the behavior of the DDM. \n","\n","With thresholding stopping rule, we define a desired error rate and will continue making measurements until that error is reached. Experimental evidence suggested that evidence accumulation and thresholding stopping strategy happen at neuronal level.\n","\n","*     Complete the function threshold_from_errorate to calculate the evidence threshold from desired error rate $\\alpha$ as described in the formulas below. The evidence thresholds $th_L$ $th_R$ for $p_L$ and $p_R$ are opposite of each other as shown below, so you can just return the absolute value.\n","\n","$$\n","\\begin{eqnarray}\n","th_L = \\log \\dfrac{\\alpha}{1-\\alpha} & = & -th_R\\\\\n","th_R = \\log \\dfrac{1-\\alpha}{\\alpha} & = & -th_L\n","\\end{eqnarray}\n","$$\n","*     Complete the function simulate_SPRT_threshold to simulate an SPRT with thresholding stopping rule given noise level and desired threshold\n","*     Run repeated simulations for a given noise level and a desired error rate visualize the DDM traces using our previous code \n","\n","**Taper une démonstration interactive**\n","\n"]},{"cell_type":"markdown","metadata":{"id":"f-CN1piiYzQE","colab_type":"text"},"source":["# Part 5 : Accuracy vs. Threshold\n","\n","The faster you make a decision, the lower your accuracy often is. This phenomenon is known as the **speed/accuracy tradeoff**. Humans can make this tradeoff in a wide range of situtations as many animal species, including ants, bees, rodents, and monkeys also show similar effects.\n","\n","To illustrate the speed/accuracy tradeoff under thresholding stopping rule, let's run some simulations under different thresholds and look at how average decision speed (1/length) changes with average decision accuracy. We used speed rater than accuracy because in real experiments, subjects can be incetivized to respond faster or slower, it's much harder to precisely control their deicison time or error threshold.\n","\n","*     Complete the function simulate_accuracy_vs_threshold to simulate and compute accuracies vs. average decision lengths for a list of error thresholds. You will need to supply code to calculate average decision \"speed\" from the lengts of trials. You should also calculate the overall accuracy across these trials.\n","\n","*      We've set up a list of error thresholds. Run repeated simulations and collect average accuracy with average length for each error rate in this list, and use our provided code to visualize the speed/accuracy tradeoff. You should see a positive correlation between length and accuracy."]},{"cell_type":"markdown","metadata":{"id":"81UL8pvfYzXc","colab_type":"text"},"source":["# BONUS : Urgency gating"]},{"cell_type":"markdown","metadata":{"id":"LwI_YeLOZJNW","colab_type":"text"},"source":["# **Take-home message**"]}]}